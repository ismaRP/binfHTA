source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Ptroglodytes.UCSC.panTro5")
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Ptroglodytes.UCSC.panTro5")
library(BSgenome.Ptroglodytes.UCSC.panTro2)
BSgenome.Ptroglodytes.UCSC.panTro5
BSgenome.Ptroglodytes.UCSC.panTro2
names(BSgenome.Ptroglodytes.UCSC.panTro2)
BSgenome.Ptroglodytes.UCSC.panTro2$chr1
library(BSgenome.Ptroglodytes.UCSC.panTro3)
BSgenome.Ptroglodytes.UCSC.panTro3
BSgenome.Ptroglodytes.UCSC.panTro3$chr1
genome <- BSgenome.Ptroglodytes.UCSC.panTro3
View(genome)
library(GenomicFeatures)
library(GenomicFeatures)
library(GenomicFeatures)
browseVignettes("GenomicFeatures")
txdb <- makeTranscriptDbFromUCSC("panTro3", "refGene")
txdb <- makeTxDbFromUCSC("panTro3", "refGene")
txdb <- makeTxDbFromUCSC("genome", "refGene")
txdb <- makeTxDbFromUCSC(genome, "refGene")
txdb <- makeTxDbFromUCSC("genome", "refGene")
library(GenomicFeatures)
library(BSgenome.Ptroglodytes.UCSC.panTro3)
genome=BSgenome.Ptroglodytes.UCSC.panTro3
library("AnnotationHub")
txdb <- makeTranscriptDbFromUCSC("panTro3", "refGene")
txdb <- makeTxDbFromUCSC("panTro3", "refGene")
if (interactive())
vignette("GenomeSearching", package="BSgenome")
organism(genome)
genome
chr1=genome$chr1
ls()
ls()
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
clear()
mpg
ggplot(data=mpg)
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)+geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)
+geom_point(mapping = aes(x=displ, y=hwy))
geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)+geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)
+geom_point(mapping = aes(x=displ, y=hwy))
?mpg
ggplot(data=mpg)+geom_point(mapping = aes(x=displ, y=hwy))
?mpg
ggplot(data=mpg)+geom_point(mapping = aes(x=class, y=drv))
# Exercise 1
ggplot(data=mpg)+geom_point(mapping = aes(x=displ, y=hwy))
ggplot(data=mpg)+geom_point(mapping = aes(x=cyl, y=hwy))
ggplot(data=mpg)+geom_point(mapping = aes(x=class, y=drv))
ggplot(data=mpg)+geom_count(mapping = aes(x=class, y=drv))
# Displ vs hwy
ggplot(data=mpg)+geom_point(mapping = aes(x=displ, y=hwy, color = class))
# Displ vs hwy
ggplot(data=mpg)+
geom_point(mapping = aes(x=displ, y=hwy, color = class)) +
geom_text(mapping = aes(x = displ, y = hwy, label=model))
# Add color and shape
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, col=cyl , shape=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, col=as.factor(cyl) , shape=class))
## Exercise 2
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy))
## Exercise 2
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy, col=displ))
mpg
## Exercise 2
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy, col=as.factor(cyl), shape=class))
## Exercise 2
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy, shape=as.factor(cyl), col=class))
# Split plot by class
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
# Split by drv and cyl
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
# Split by drv and cyl
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, col=class), alpha=0.2) +
facet_grid(drv ~ cyl)
# Split by drv and cyl
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, col=class), alpha=0.5) +
facet_grid(drv ~ cyl)
## Exercise 2
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy, shape=as.factor(cyl), col=class))
# Split plot by class
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
# Split by drv and cyl
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, col=class), alpha=0.5) +
facet_grid(drv ~ cyl)
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy, col=displ))
ggplot(data=mpg)+
geom_point(mapping = aes(x=cty, y=hwy, col=displ))+
facet_grid(cyl~class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = cty, y = hwy, col=displ, shape=as.factor(cyl) ))+
facet_wrap( ~ class)
## Exercise 3
?diamonds
diamonds
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
#tribble is a command to make a small tibble "manually"
demo <- tribble(~cut,
~freq,
"Fair",
1610,
"Good",
4906,
"Very Good", 12082,
"Premium",
13791,
"Ideal",
21551)
# use the geom_col instead which does stat=identity per dafault:
ggplot(data = demo) + geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
#tribble is a command to make a small tibble "manually"
demo <- tribble(~cut,        ~freq,
"Fair",      1610,
"Good",      4906,
"Very Good", 12082,
"Premium",   13791,
"Ideal",     21551)
# use the geom_col instead which does stat=identity per dafault:
ggplot(data = demo) + geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
# Add color to barplot. Auto: stack
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
position = "fill")
gplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
position = "dodge")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
position = "dodge")
### BIOINFORMATICS OF HIGH THROUGHPUT ANALYSIS
library(tidyverse)
## Exercise 3
?diamonds
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))
#tribble is a command to make a small tibble "manually"
demo <- tribble(~cut,        ~freq,
"Fair",      1610,
"Good",      4906,
"Very Good", 12082,
"Premium",   13791,
"Ideal",     21551)
# use the geom_col instead which does stat=identity per dafault:
ggplot(data = demo) + geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
# Add color to barplot. Auto: stack
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity),
position = "dodge")
diamons
diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = clarity, fill = color),
position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = color),
position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = color),
position = "fill")+
facet_wrap(~clarity)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price ))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price ), binwidth = 20)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price ), binwidth = 30)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price ), binwidth = 300)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price ), bins = 30)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price ), bins = 20)
# Themes
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut)) +
theme_bw() +
coord_flip()
# Themes
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color)) +
theme_bw() +
coord_flip()
# Themes
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color)) +
theme_classic() +
coord_flip()
# Themes
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color)) +
theme_minimal() +
coord_flip()
# Themes
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color)) +
theme_bw() +
coord_flip()
# Themes, coor flip, axes labels
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color)) +
theme_bw() +
coord_flip() +
xlab("Type of cut") +
ylab("Count of diamonds")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
filter(babynames, str_detect(name, "^P"), sex=='F' ) %>%
group_by(name) %>%
summarise(count = sum(n)) %>%
arrange(desc(count)) -> tableQ1
install.packages("babynames")
library(babynames)
head(babynames)
filter(babynames, str_detect(name, "^P"), sex=='F' ) %>%
group_by(name) %>%
summarise(count = sum(n)) %>%
arrange(desc(count)) -> tableQ1
tableQ1[1:5,]
View(tableQ1)
View(tableQ1)
tableQ1$name
tableQ1$name[1:5,]
tableQ1$name[1:5]
P_names_full<-filter(babynames, name=="Patricia" | name== 'Pamela'| name== 'Phyllis'| name== 'Peggy'| name=='Paula' , sex=='F')
P_names_full<-filter(babynames, name %in% tableQ1$name[1,5])
P_names_full<-filter(babynames, name=="Patricia" | name== 'Pamela'| name== 'Phyllis'| name== 'Peggy'| name=='Paula' , sex=='F')
P_names_full<-filter(babynames, name %in% tableQ1$name[1:5])
ggplot(P_names_full)+geom_line(data=P_names_full, mapping = aes(x=year, y=n, col=name))
P_names_full<-filter(babynames, name=="Patricia" | name== 'Pamela'| name== 'Phyllis'| name== 'Peggy'| name=='Paula' , sex=='F')
P_names_full<-filter(babynames, name %in% tableQ1$name[1:5], sex=='F)
ggplot(P_names_full)+geom_line(data=P_names_full, mapping = aes(x=year, y=n, col=name))
P_names_full<-filter(babynames, name=="Patricia" | name== 'Pamela'| name== 'Phyllis'| name== 'Peggy'| name=='Paula' , sex=='F')
P_names_full<-filter(babynames, name %in% tableQ1$name[1:5], sex=='F')
ggplot(P_names_full)+geom_line(data=P_names_full, mapping = aes(x=year, y=n, col=name))
arwen_1990<-filter(babynames, name=='Arwen', year=='1990')$n
arwen_2004<-filter(babynames, name=='Arwen', year=='2004')$n
no_arwen_2004<-filter(babynames, name!='Arwen', year=='2004')
n_no_arwen_2004<-sum(no_arwen_2004$n)
no_arwen_1990<-filter(babynames, name!='Arwen', year=='1990')
n_no_arwen_1990<-sum(no_arwen_1990$n)
table_names<-matrix(c(arwen_1990, n_no_arwen_1990, arwen_2004, n_no_arwen_2004), nrow = 2)
rownames(table_names)<-c('Arwen', 'No Arwen')
colnames(table_names)<-c('1990', '2004')
fisher.test(table_names)
p_value_Q2<-fisher.test(table_names)$'p.value'
data_flowers <- read_tsv("data/flowers.txt")
flowers_petal <- transmute(data_flowers,  length = data_flowers$Petal.Length,
width = data_flowers$Petal.Width, Species =
as.factor(data_flowers$Species), category = "Petal")
flowers_sepal <- transmute(data_flowers, length = data_flowers$Sepal.Length,
width = data_flowers$Sepal.Width, Species =
as.factor(data_flowers$Species), category = "Sepal")
flowers_exp <- bind_rows(flowers_petal, flowers_sepal)
flowers_exp %>% ggplot(aes(x=length, y=width, col = Species)) +  geom_point() +
facet_wrap(~category, scales = "free") + theme_bw() + geom_smooth(method = "lm",
fullrange = TRUE)
data_flowers <- read_tsv("data/flowers.txt")
flowers_petal <- transmute(data_flowers,  length = data_flowers$Petal.Length,
width = data_flowers$Petal.Width, Species =
as.factor(data_flowers$Species), category = "Petal")
flowers_sepal <- transmute(data_flowers, length = data_flowers$Sepal.Length,
width = data_flowers$Sepal.Width, Species =
as.factor(data_flowers$Species), category = "Sepal")
flowers_exp <- bind_rows(flowers_petal, flowers_sepal)
flowers_exp %>% ggplot(aes(x=length, y=width, col = Species)) +  geom_point() +
facet_wrap(~category, scales = "free") + theme_bw() + geom_smooth(method = "lm",
fullrange = TRUE)
data_flowers <- read_tsv("data/flowers.txt")
flowers_petal <- transmute(data_flowers,  length = data_flowers$Petal.Length,
width = data_flowers$Petal.Width, Species =
as.factor(data_flowers$Species), category = "Petal")
flowers_sepal <- transmute(data_flowers, length = data_flowers$Sepal.Length,
width = data_flowers$Sepal.Width, Species =
as.factor(data_flowers$Species), category = "Sepal")
flowers_exp <- bind_rows(flowers_petal, flowers_sepal)
flowers_exp %>% ggplot(aes(x=length, y=width, col = Species)) +  geom_point() +
facet_wrap(~category, scales = "free") + theme_bw() + geom_smooth(method = "lm",
fullrange = TRUE)
chip<-read_tsv("data/chip_mm5.txt") #read data
head(chip) #show data
ggplot(chip) + geom_histogram(aes(x=score),binwidth = 20) + facet_wrap(~chr) + theme_bw() # plot distribution of scores across each chromosome
oneway.test(score ~ as.factor(chr), data=chip) #Anova test for significance difference between score values across chromosomes
new_chip<-mutate(chip, site.width = end - start) #create site.width (end - start)
head(new_chip) #new data
ggplot(new_chip) + geom_histogram(aes(x=site.width),binwidth = 50) + facet_wrap(~chr) + theme_bw() # plot distribution of site width across each chromosome. Not a normal distribution
kruskal.test(site.width ~ as.factor(chr), data=new_chip) #Kruskal test for significance difference between site width across chromosomes
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
filter(babynames, str_detect(name, "^P"), sex=='F' ) %>%
group_by(name) %>%
summarise(count = sum(n)) %>%
arrange(desc(count)) -> tableQ1
sessionInfo()$R.version$version.string
source("https://bioconductor.org/biocLite.R")
packagesNeeded <- c(
'DESeq2',
'testthat',
'knitr',
'rmarkdown',
'vsn',
'pheatmap',
'RColorBrewer',
'IHW',
'apeglm',
'ashr',
'tximport',
'tximportData',
'readr',
'pbapply',
'airway',
'pasilla',
'IsoformSwitchAnalyzeR',
'BSgenome.Hsapiens.UCSC.hg19',
'BSgenome.Mmusculus.UCSC.mm10'
)
biocLite(packagesNeeded)
library('IsoformSwitchAnalyzeR')
library('DESeq2')
library(IsoformSwitchAnalyzeR)
biocLite(IsoformSwitchAnalyzeR)
source("https://bioconductor.org/biocLite.R")
biocLite(IsoformSwitchAnalyzeR)
biocLite(IsoformSwitchAnalyzer)
library('IsoformSwitchAnalyzer')
library('IsoformSwitchAnalyzeR')
biocLite('IsoformSwitchAnalyzeR')
library('IsoformSwitchAnalyzeR')
setwd("~/mscbioinf/project")
library(tidyverse)
# Coverage
cov_dk = read_tsv("wgs_out/donkey/donkey_stcruz_wgs.GCF_001305755.1_ASM130575v1_genomic.coverage",
comment="#")
cov_dk = cov_dk[1,]
cov_dk = select(cov_dk, -Sample , -Library, -Contig)
cov_dk
?bind_rows
# Coverage
cov_dk = read_tsv("wgs_out/donkey/donkey_stcruz_wgs.GCF_001305755.1_ASM130575v1_genomic.coverage",
comment="#")
cov_dk = cov_dk[1,]
cov_dk = select(cov_dk, -Sample , -Library, -Contig)
cov_wf = read_tsv("wgs_out/wolf/wolf_stcruz_wgs.L.Dalen_14_wolf.scf.noHets.coverage",
comment="#")
cov_wf = cov_wf[1,]
cov_wf = select(cov_wf, -Sample , -Library, -Contig)
bind_rows(cov_dk, cov_wf)
# Summary
summary_dk = read_tsv("wgs_out/donkey/donkey_stcruz_wgs.summary", comment="#")
summary_dk = select(summary, Target, Measure, Value, Description)
summary_dk = select(summary_dk, Target, Measure, Value, Description)
# Summary
summary_dk = read_tsv("wgs_out/donkey/donkey_stcruz_wgs.summary", comment="#")
summary_dk = select(summary_dk, Target, Measure, Value, Description)
View(summary_dk)
summary_dk = select(summary_dk, -Sample, -Library)
summary_wf = read_tsv("wgs_out/wolf/wolf_stcruz_wgs.summary", comment="#")
summary_wf = select(summary_wf, -Sample, -Library)
View(summary_dk)
View(cov_dk)
View(cov_wf)
dk_wf_cov = bind_rows(cov_dk, cov_wf)
View(dk_wf_cov)
dk_wf_cov
dk_wf_cov
trnasmute(dk_wf_cov, frac_coll = Collapsed/Hits)
transmute(dk_wf_cov, frac_coll = Collapsed/Hits)
dk_wf_cov
mutate(dk_wf_cov, frac_coll = Collapsed/Hits)
View(summary_dk)
?head
summary_dk = head(summary_dk, 18)
View(summary_wf)
summary_wf = head(summary_wf, 18)
# Summary
summary_dk = read_tsv("wgs_out/donkey/donkey_stcruz_wgs.summary.p", comment="#")
summary_dk = select(summary_dk, -Sample, -Library)
summary_dk = head(summary_dk, 18)
summary_wf = read_tsv("wgs_out/wolf/wolf_stcruz_wgs.summary.p", comment="#")
summary_wf = select(summary_wf, -Sample, -Library)
summary_wf = head(summary_wf, 18)
View(summary_dk)
View(dk_wf_cov)
dk_wf_cov = mutate(dk_wf_cov, frac_coll = Collapsed/Hits)
View(summary_wf)
setwd("~/mscbioinf/bHTA/binfHTA/hw2")
install.packages(VennDiagram)
install.packages("VennDiagram"")
"
install.packages("VennDiagram")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#setwd("~/Dropbox2/Dropbox/TEACHING/BOHTA2018/homework1-3/hw2")
# change as appropriate
# both tibbles are modified to include the fraction of coverage at each chromosome
#(even if it is 0), filter away the whole genome coverage and duplicates of chromosomes,
#and adding a column with the respective receptor.
Simple_ERa <- ERa_genome_coverage %>% mutate( Fraction_of_Coverage = 1 - Fraction_of_Coverage) %>%
filter(Depth_of_Coverage == "0" , str_detect(Chromosome, "chr")) %>% mutate(Receptor="ERa")
