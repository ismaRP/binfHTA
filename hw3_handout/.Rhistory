knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(IsoformSwitchAnalyzeR)
packageVersion("IsoformSwitchAnalyzeR")
R.Version()
?importIsoformExpression()
setwd("~/Documents/GitHub/binfHTA/hw3_handout")
importIsoformExpression(parentDir = "./salmon_result_part2")
importIsoformExpression(parentDir = "./salmon_result_part2") %>% importRdata(addAnnotatedORFs=FALSE)
importIsoformExpression(parentDir = "./salmon_result_part2")
IsoformList1 <-  importIsoformExpression(parentDir = "./salmon_result_part2")
head(IsoformList1)
?importRdata
IsoformList1$abundance
IsoformList1$counts
head(IsoformList1$counts,4)
head(IsoformList1)
IsoformList1$length
importRdata(isoformCountMatrix = IsoformList1$counts, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf" )
cuffDB <- prepareCuffExample()
cuffDB
cummeRbund::replicates(cuffDB)
designMatrix <- cummeRbund::replicates(cuffDB)[,c('rep_name','sample_name')]
designMatrix
designMatrix <- cummeRbund::replicates(IsoformList1)[,c('rep_name','sample_name')]
designMatrix <- cummeRbund::replicates(IsoformList1$counts)[,c('rep_name','sample_name')]
OurDesignMatrix <- matrix(c(KO1,KO2,KO3,WT1,WT2,WT3,KO,KO,KO,WT,WT,WT), nrow = 6, ncol=2)
OurDesignMatrix <- matrix(c('KO1','KO2','KO3','WT1','WT2','WT3','KO','KO','KO','WT','WT','WT'), nrow = 6, ncol=2)
OurDesignMatrix
colnames(OurDesignMatrix) <- c('sampleID','condition')
importRdata(isoformCountMatrix = IsoformList1$counts, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
repCount1 <- IsoformList1$counts
importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
is.atomic(OurDesignMatrix)
OurDesignMatrix <- matrix(as.factor(c('KO1','KO2','KO3','WT1','WT2','WT3','KO','KO','KO','WT','WT','WT')), nrow = 6, ncol=2)
colnames(OurDesignMatrix) <- c('sampleID','condition')
is.atomic(OurDesignMatrix)
importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
is.matrix(repCount1)
repCount1
repCount1 <- repCountMatrix(IsoformList1$counts)
repCount1 <- repCountMatrix(IsoformList1$counts)
repCount1 <- as.matrix(IsoformList1$counts)
importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
is.matrix(repCount1)
is.matrix(OurDesignMatrix)
isoRepCount <- repCountMatrix(isoforms(cuffDB))
isoRepCount
isoRepCount$isoform_id <- rownames(isoRepCount)
isoRepCount
repCount1
IsoformList1
IsoformList1$counts
is.matrix(IsoformList1$counts)
repCount1 <- as.matrix(as.number(IsoformList1$counts))
repCount1 <- data.matrix(IsoformList1$counts)
repCount1
repCount1 <- data.matrix(IsoformList1$counts,rownames.force = NA)
?data.matrix
repCount1 <- data.matrix(IsoformList1$counts,rownames.force ="" )
repCount1
repCount1 <- data.matrix(IsoformList1$counts[,2:]
repCount1 <- data.matrix(IsoformList1$counts[,2:8]
repCount1
repCount1 <- data.matrix(IsoformList1$counts[,2:8])
repCount1 <- data.matrix(IsoformList1$counts[,2:7])
repCount1
repCount1$isoform_id <- rownames(isoRepCount)
head(repCount1)
repCount1 <- data.matrix(IsoformList1$counts[,2:7])
repCount1$isoform_id <- rownames(repCount1)
repCount1
repCount1 <- data.matrix(IsoformList1$counts[,2:7])
repCount1
colnames(repCount1) <- c('isoform_id','KO1','KO2','KO3','WT1','WT2','WT3')
repCount1 <- data.matrix(IsoformList1$counts[,2:7])
rownames(repCount1)
repCount1$isoform_id <- rownames(repCount1)
repCount1 <- IsoformList1$counts[,2:7])
repCount1 <- IsoformList1$counts[,2:7]
repCount1$isoform_id <- rownames(repCount1)
repCount1
importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
OurDesignMatrix <- data.frame(as.factor(c('KO1','KO2','KO3','WT1','WT2','WT3','KO','KO','KO','WT','WT','WT')), nrow = 6, ncol=2)
OurDesignMatrix
OurDesignMatrix <- data.frame(sampleID = c('KO1','KO2','KO3','WT1','WT2','WT3'),condition=c('KO','KO','KO','WT','WT','WT'))
OurDesignMatrix
importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
My.SwitchAnalyzerRList <-  importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
My.SwitchAnalyzerRList
summary(My.SwitchAnalyzerRList)
extractSwitchSummary(My.SwitchAnalyzerRList)
My.SwitchAnalyzerRList$isoformFeatures
IsoformList1
head(IsoformList1$counts)
head(IsoformList1$counts[1:2])
head(data.frame(IsoformList1$counts[1:2]))
head(data.frame(IsoformList1$counts[1:7]))
head(data.frame(IsoformList1$counts))
My.SwitchAnalyzerRList$exons
My.SwitchAnalyzerRList$TCONS_00000001
My.SwitchAnalyzerRList$TCONS_0000001
My.SwitchAnalyzerRList
My.SwitchAnalyzerRList$isoformFeatures
head(My.SwitchAnalyzerRList$isoformFeatures,2)
repCount1
library(pheatmap)
?pheatmap
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(viridis)
library(scales)
library(rjson)
wt1_quant = read_tsv('salmon_result_part1/WT1/quant.sf')
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
wt1_quant %>% filter(EffectiveLength<175 & EffectiveLength>165) %>%
ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
filterLength = filter(wt1_quant, EffectiveLength<175 & EffectiveLength>165)
head(filterLength, 10)
filterLength = filter(wt1_quant, EffectiveLength<175 & EffectiveLength>165)
knitr::kable(head(filterLength, 10))
salmon_data = importIsoformExpression('salmon_result_part1/')
pseudo_log2 = function(x){
t = log2(x+1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
knitr::kable(head(salmon_data$abundance, 4))
knitr::kable(head(data.frame(transformed_matrix), 4))
variances = apply(transformed_matrix, 1, var)
transformed_matrix = cbind(transformed_matrix, variances)
transformed_tibble = as.tibble(transformed_matrix, rownames='isoform_id')
top_var = head(arrange(transformed_tibble, desc(variances)),100)
knitr::kable(head(top_var, 5))
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='none', fontsize = 7)
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='none', fontsize = 5)
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='none', fontsize_row = 5, fontsize_col = 10)
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='none', fontsize_row = 4, fontsize_col = 10)
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='row', fontsize_row = 4, fontsize_col = 10)
library(IsoformSwitchAnalyzeR)
packageVersion("IsoformSwitchAnalyzeR")
R.Version()
?importIsoformExpression()
IsoformList1 <-  importIsoformExpression(parentDir = "./salmon_result_part2")
head(data.frame(IsoformList1$counts))
repCount1 <- IsoformList1$counts[,2:7]
packageVersion("IsoformSwitchAnalyzeR")
source("http://bioconductor.org/biocLite.R")
biocLite("IsoformSwitchAnalyzeR")
biocLite("IsoformSwitchAnalyzeR")
source("http://bioconductor.org/biocLite.R")
biocLite("IsoformSwitchAnalyzeR")
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(viridis)
library(scales)
library(rjson)
packageVersion("IsoformSwitchAnalyzeR")
install.packages("/home/ismael/R/x86_64-pc-linux-gnu-library/3.4/IsoformSwitchAnalyzeR_1.2.0.tar.gz", repos=NULL, type='source')
packageVersion("IsoformSwitchAnalyzeR")
packageVersion("IsoformSwitchAnalyzeR")
R.Version()
?importIsoformExpression()
IsoformList1 <-  importIsoformExpression(parentDir = "./salmon_result_part2")
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='row', fontsize_row = 4, fontsize_col = 10)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(viridis)
library(scales)
library(rjson)
wt1_quant = read_tsv('salmon_result_part1/WT1/quant.sf')
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
wt1_quant %>% filter(EffectiveLength<175 & EffectiveLength>165) %>%
ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
filterLength = filter(wt1_quant, EffectiveLength<175 & EffectiveLength>165)
knitr::kable(head(filterLength, 10))
salmon_data = importIsoformExpression('salmon_result_part1/')
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(viridis)
library(scales)
library(rjson)
wt1_quant = read_tsv('salmon_result_part1/WT1/quant.sf')
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
wt1_quant %>% filter(EffectiveLength<175 & EffectiveLength>165) %>%
ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
filterLength = filter(wt1_quant, EffectiveLength<175 & EffectiveLength>165)
knitr::kable(head(filterLength, 10))
salmon_data = importIsoformExpression('salmon_result_part1/')
pseudo_log2 = function(x){
t = log2(x+1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
salmon_data
salmon_data = importIsoformExpression('salmon_result_part1/')
pseudo_log2 = function(x){
t = log2(x+1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
pseudo_log2 = function(x){
t = log2(x + 1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
?apply
transformed_matrix = apply(salmon_data$abundance, 1, pseudo_log2)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(viridis)
library(scales)
library(rjson)
salmon_data = importIsoformExpression('salmon_result_part1/salmon_result_part1/')
pseudo_log2 = function(x){
t = log2(x+1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
salmon_data$abundance
is.NA(salmon_data$abundance)
is.na(salmon_data$abundance)
sum(is.na(salmon_data$abundance))
salmon_data$abundance
?importIsoformExpression
salmon_data$abundance$isoform_id
salmon_data$abundance$isoform_id = NULL
salmon_data$abundance$isoform_id = NULL
salmon_data$abundance$isoform_id
salmon_data$abundance
pseudo_log2 = function(x){
t = log2(x + 1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 1, pseudo_log2)
knitr::kable(head(salmon_data$abundance, 4))
knitr::kable(head(data.frame(transformed_matrix), 4))
transformed_matrix
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
knitr::kable(head(salmon_data$abundance, 4))
transformed_matrix = apply(salmon_data$abundance, 2, pseudo_log2)
knitr::kable(head(salmon_data$abundance, 4))
transformed_matrix
knitr::kable(head(transformed_matrix), 4)
knitr::kable(head(salmon_data$abundance, 4))
knitr::kable(head(data.frame(transformed_matrix), 4))
variances = apply(transformed_matrix, 1, var)
transformed_matrix = cbind(transformed_matrix, variances)
transformed_tibble = as.tibble(transformed_matrix, rownames='isoform_id')
top_var = head(arrange(transformed_tibble, desc(variances)),100)
knitr::kable(head(top_var, 5))
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='none', fontsize_row = 4, fontsize_col = 10)
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='row', fontsize_row = 4, fontsize_col = 10)
packageVersion("IsoformSwitchAnalyzeR")
R.Version()
IsoformList1 <-  importIsoformExpression(parentDir = "./salmon_result_part2")
head(data.frame(IsoformList1$counts))
repCount1 <- IsoformList1$counts[,2:7]
repCount1$isoform_id <- rownames(repCount1)
OurDesignMatrix <- data.frame(sampleID = c('KO1','KO2','KO3','WT1','WT2','WT3'),condition=c('KO','KO','KO','WT','WT','WT'))
colnames(OurDesignMatrix) <- c('sampleID','condition')
My.SwitchAnalyzerRList <-  importRdata(isoformCountMatrix = repCount1, addAnnotatedORFs=FALSE, isoformExonAnnoation = "./salmon_result_part2/subset.gtf",designMatrix = OurDesignMatrix)
head(My.SwitchAnalyzerRList$isoformFeatures,2)
summary(My.SwitchAnalyzerRList)
My.SwitchAnalyzerRList <- importRdata(isoformCountMatrix = repCount1,
addAnnotatedORFs = FALSE,
isoformExonAnnoation = "./salmon_result_part2/subset.gtf",
designMatrix = OurDesignMatrix)
# head(My.SwitchAnalyzerRList$isoformFeatures,2)
summary(My.SwitchAnalyzerRList)
My.SwitchList <- readRDS("./hw3switchList.Rdata")
My.SwitchList.select <-  select(as.tibble(My.SwitchList$isoformFeatures), iso_ref, gene_ref, isoform_id, gene_id, condition_1, condition_2, gene_name, gene_q_value, gene_switch_q_value) %>%
group_by(gene_name) %>%
summarise(gene_q_value = min(gene_q_value), gene_switch_q_value = min(gene_switch_q_value)) %>%
arrange(gene_switch_q_value)
knitr::kable(My.SwitchList.select[1:10,],digits=100, caption="2.3 \n Sorted genes of lowest gene switch q-value")
gene.names <- pull(My.SwitchList.select[1:10,], gene_name)
#switchPlot(switchAnalyzeRlist = My.SwitchList, gene='Tef')
plotter <- function(name){
switchPlot(switchAnalyzeRlist = My.SwitchList, gene=name)
}
sapply(gene.names, FUN = plotter)
plotter('Tef')
extractConsequenceEnrichment(
My.SwitchList,
consequencesToAnalyze='all',
analysisOppositeConsequence = TRUE
)
extractSplicingEnrichment(My.SwitchList)
extractConsequenceEnrichment(
My.SwitchList,
consequencesToAnalyze='all',
analysisOppositeConsequence = TRUE
)
extractSplicingEnrichment(My.SwitchList)
salmon_data = importIsoformExpression('salmon_result_part1/')
salmon_data$abundance$isoform_id = NULL
pseudo_log2 = function(x){
t = log2(x + 1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, pseudo_log2)
salmon_data = importIsoformExpression('salmon_result_part1/')
salmon_data$abundance$isoform_id = NULL
pseudo_log2 = function(x){
t = log2(x + 1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2,pseudo_log2)
knitr::kable(head(salmon_data$abundance, 4))
knitr::kable(head(data.frame(transformed_matrix), 4))
packageVersion("IsoformSwitchAnalyzeR")
IsoformList1 <-  importIsoformExpression(parentDir = "./salmon_result_part2")
head(data.frame(IsoformList1$counts))
repCount1 <- IsoformList1$counts[,2:7]
#colnames(repCount1) <- c('isoform_id','KO1','KO2','KO3','WT1','WT2','WT3')
#rownames(repCount1)
repCount1$isoform_id <- rownames(repCount1)
#head(IsoformList1$counts,4)
OurDesignMatrix <- data.frame(sampleID = c('KO1','KO2','KO3','WT1','WT2','WT3'),condition=c('KO','KO','KO','WT','WT','WT'))
colnames(OurDesignMatrix) <- c('sampleID','condition')
My.SwitchAnalyzerRList <- importRdata(isoformCountMatrix = repCount1,
addAnnotatedORFs = FALSE,
isoformExonAnnoation = "./salmon_result_part2/subset.gtf",
designMatrix = OurDesignMatrix)
# head(My.SwitchAnalyzerRList$isoformFeatures,2)
summary(My.SwitchAnalyzerRList)
#?importRdata
#cuffDB <- prepareCuffExample()
#designMatrix <- cummeRbund::replicates(IsoformList1$counts)[,c('rep_name','sample_name')]
#isoRepCount <- repCountMatrix(isoforms(cuffDB))
library(tidyverse)
?geom_smooth
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(tidyverse)
library(IsoformSwitchAnalyzeR)
library(pheatmap)
library(viridis)
library(scales)
#library(rjson)
wt1_quant = read_tsv('salmon_result_part1/WT1/quant.sf')
wt1_quant %>% ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
wt1_quant %>% filter(EffectiveLength<175 & EffectiveLength>165) %>%
ggplot(aes(x=Length, y=EffectiveLength)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, linetype = 'dashed') +
geom_smooth(method='lm', fullrange=T) +
scale_x_continuous(trans=log10_trans()) +
scale_y_continuous(trans=log10_trans()) +
xlab('Length (log10-scale)') +
ylab('Effective length (log10-sacale)')
salmon_data = importIsoformExpression('salmon_result_part1/')
salmon_data$abundance$isoform_id = NULL
pseudo_log2 = function(x){
t = log2(x + 1)
return(t)
}
transformed_matrix = apply(salmon_data$abundance, 2,pseudo_log2)
knitr::kable(head(salmon_data$abundance, 4))
knitr::kable(head(data.frame(transformed_matrix), 4))
transformed_matrix
transformed_matrix = as.tibble(trans)
transformed_matrix = as.tibble(transformed_matrix, rownames='isoform_id')
transformed_matrix
transmute(transformed_tibble, variance=var(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3))
transformed_tibble = as.tibble(transformed_matrix, rownames='isoform_id')
transmute(transformed_tibble, variance=var(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3))
transmute(transformed_tibble, variance=var(c(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3)))
my_flowers = read_tsv("data/flowers.txt")
mutate(transformed_tibble, variance=var(c(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3)))
?mutate
transformed_tibble = as.tibble(transformed_matrix, rownames='isoform_id')
mutate(transformed_tibble, variance=var(c(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3)))
var(c(2.517432e-01,0.000000e+00,0.000000e+00,3.217914e-01,0.000000e+00,0.000000e+00))
transformed_tibble = as.tibble(transformed_matrix, rownames='isoform_id')
transformed_tibble %>% rowwise() %>%
mutate(variance=var(c(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3)))
top_var = head(arrange(transformed_tibble, desc(variances)),100)
top_var = head(arrange(transformed_tibble, desc(variance)),100)
transformed_tibble = transformed_tibble %>% rowwise() %>%
mutate(variance=var(c(WT1, WT2, WT3, WTTPA1, WTTPA2, WTTPA3)))
top_var = head(arrange(transformed_tibble, desc(variance)),100)
knitr::kable(head(top_var, 5))
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='none', fontsize_row = 4, fontsize_col = 10)
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=T,
scale='row', fontsize_row = 4, fontsize_col = 10)
top_var_matrix = as.matrix(top_var[,2:7])
rownames(top_var_matrix) = top_var$isoform_id
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=F,
scale='none', fontsize_row = 4, fontsize_col = 10)
pheatmap(top_var_matrix, color=magma(10), cutree_cols=2, show_rownames=F,
scale='row', fontsize_row = 4, fontsize_col = 10)
